"""
SAT Solver implementation for the Gem Hunter game using pysat.

This module implements a SAT solver that takes a CNF in DIMACS format 
(generated by cnf_generator.py) and solves it to find trap/gem placements.
"""

import time
import consts

from pysat.formula import CNF
from pysat.solvers import Solver

from utils.solver_utils import unflatten

class SATSolver:
    def __init__(self, puzzle=None, dimacs_file=None):
        """
        Initialize a SAT solver for the Gem Hunter puzzle.
        
        Args:
            puzzle (list, optional): 2D grid representing the puzzle map for displaying results
            dimacs_file (str, optional): Path to DIMACS file containing the CNF formula
        """
        self.puzzle = puzzle
        self.height = len(puzzle) if puzzle else 0
        self.width = len(puzzle[0]) if self.height > 0 else 0
        self.cnf = None
        self.dimacs_file = dimacs_file
        
    def load_dimacs(self, dimacs_file=None):
        """
        Load CNF formula from a DIMACS file.
        
        Args:
            dimacs_file (str, optional): Path to DIMACS file
            
        Returns:
            bool: True if file was loaded successfully, False otherwise
        """
        file_to_load = dimacs_file or self.dimacs_file
        if not file_to_load:
            return False
            
        try:
            self.cnf = CNF(from_file=file_to_load)
            self.dimacs_file = file_to_load
            return True
        except Exception as e:
            print(f"Error loading DIMACS file: {e}")
            return False
        
    def solve(self):
        """
        Solve the puzzle using the DIMACS CNF formula.
        
        Returns:
            tuple: (solution grid, solving time in seconds, was solution found)
        """
        if not self.cnf and not self.load_dimacs():
            return None, 0, False
                
        start_time = time.time()
        solution_grid = None
        if self.puzzle:
            solution_grid = [row[:] for row in self.puzzle] 
        else:
            max_var = self.cnf.nv
            grid_size = int(max_var ** 0.5)
            solution_grid = [[consts.EMPTY_CELL for _ in range(grid_size)] for _ in range(grid_size)]
            self.width = self.height = grid_size
            
        solver = Solver(name='g4')
        solver.append_formula(self.cnf)
        
        is_satisfiable = solver.solve()
        
        if not is_satisfiable:
            print("No solution exists for the given CNF formula.")
            return solution_grid, time.time() - start_time, False

        model = solver.get_model()
        for var in model:
            is_trap_cell = var > consts.ZERO_VALUE
            if is_trap_cell: 
                row, col = unflatten(self.height, var)
                if consts.ZERO_VALUE <= row < self.height and consts.ZERO_VALUE <= col < self.width:
                    solution_grid[row][col] = consts.TRAP_CELL
                    
        if self.puzzle:
            for row in range(self.height):
                for col in range(self.width):
                    is_empty_in_solution = solution_grid[row][col] == consts.EMPTY_CELL
                    is_empty_in_puzzle = self.puzzle[row][col] == consts.EMPTY_CELL
                    
                    if is_empty_in_solution and is_empty_in_puzzle:
                        solution_grid[row][col] = consts.GEM_CELL
        
        solving_time = time.time() - start_time
        return solution_grid, solving_time, is_satisfiable

    def get_cnf_stats(self):
        """Get statistics about the loaded CNF formula."""
        if not self.cnf and not self.load_dimacs():
            return None
            
        return {
            'variables': self.cnf.nv,
            'clauses': len(self.cnf.clauses),
            'source': self.dimacs_file
        }
    
if __name__ == "__main__":
    import sys
    import os

    if len(sys.argv) > 1:
        dimacs_file = sys.argv[1]
    else:
        dimacs_file = input("Enter path to DIMACS CNF file: ")

    if not os.path.exists(dimacs_file):
        print(f"Error: File '{dimacs_file}' not found")
        sys.exit(1)

    solver = SATSolver(puzzle=None, dimacs_file=dimacs_file)
    
    stats = solver.get_cnf_stats()
    if stats:
        print("\nCNF Statistics:")
        print(f"Variables: {stats['variables']}")
        print(f"Clauses: {stats['clauses']}")
        print(f"Source: {stats['source']}\n")

    solution, solve_time, is_sat = solver.solve()
    
    if is_sat:
        print(f"Solution found in {solve_time:.3f} seconds!")
        print("\nSolution grid:")
        for row in solution:
            print(" ".join(str(cell) for cell in row))
    else:
        print("No solution exists!")
